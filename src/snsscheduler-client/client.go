// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"jzlservice/snsscheduler"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  Ping()")
	fmt.Fprintln(os.Stderr, "  SendMessage1(msgs)")
	fmt.Fprintln(os.Stderr, "  SendMessage2(msgs)")
	fmt.Fprintln(os.Stderr, "  SendMessage3(msgs)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := snsscheduler.NewSNSSchedulerClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "Ping":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Ping requires 0 args")
			flag.Usage()
		}
		fmt.Println(client.Ping())

	case "SendMessage1":
		entries1 := []*snsscheduler.SNSEntry{
			&snsscheduler.SNSEntry{
				"亲爱的春播老客户，春播回馈给您一张猪肋排兑换券MUKHB4AEBZ6F5E，限上海地区使用，快推荐给您上海的朋友吧！对方成功收货后您可获得30元春播券一张",
                0,
				"13401173761",
				"sender001",
				&snsscheduler.SMSExtraInfo{
					"春播Chunbo",
					"001",
					1,
					"",
                    false,
				},
				nil,
				nil,
			},
			&snsscheduler.SNSEntry{
				"亲爱的春播老客户，春播回馈给您一张猪肋排兑换券VUKHB2BEBZ8D3E，限上海地区使用，快推荐给您上海的朋友吧！对方成功收货后您可获得30元春播券一张",
                0,
				"13810138708",
				"sender001",
				&snsscheduler.SMSExtraInfo{
					"春播Chunbo",
					"001",
					1,
					"",
                    false,
				},
				nil,
				nil,
			},
			&snsscheduler.SNSEntry{
				"亲爱的春播老客户，春播回馈给您一张猪肋排兑换券OUKMB8AEBZ7D9A，限上海地区使用，快推荐给您上海的朋友吧！对方成功收货后您可获得30元春播券一张",
                0,
				"18510110220",
				"sender001",
				&snsscheduler.SMSExtraInfo{
					"春播Chunbo",
					"001",
					1,
					"",
                    false,
				},
				nil,
				nil,
			},

		}
		entries2 := []*snsscheduler.SNSEntry{
			&snsscheduler.SNSEntry{
				"这是一个测试消息。",
                0,
				"13401173761",
				"sender001",
				&snsscheduler.SMSExtraInfo{
					"春播",
					"001",
					1,
					"",
                    false,
				},
				nil,
				nil,
			},
		}

		msgs := []*snsscheduler.SNSMessage{
			&snsscheduler.SNSMessage{
				111,
				10001,
				1,
				2,
				11,
				3,
				entries1,
				false,
				"",
				0,
			},
			&snsscheduler.SNSMessage{
				111,
				10001,
				3,
				13,
				4,
				3,
				entries2,
				false,
				"2015-01-04 11:45:00",
				0,
			},
		}

		fmt.Println(client.SendMessage(msgs))

	case "SendMessage2":
		var entries []*snsscheduler.SNSEntry

		mobiles := []string{"13401173761"}
		for _, mobile := range mobiles {
			entry := &snsscheduler.SNSEntry{
				"验证码334265，该验证码仅用于手机号码注册，请及时填写并完成验证。",
                0,
				mobile,
				"sender001",
				&snsscheduler.SMSExtraInfo{
					"枝兰",
					"001",
					1,
					"",
                    false,
				},
				nil,
				nil,
			}

			entries = append(entries, entry)
		}

		msgs := []*snsscheduler.SNSMessage{
			&snsscheduler.SNSMessage{
				1,
				1,
				1,
				1,
				1,
				3,
				entries,
				false,
				"",
				0,
			},
		}

		for i := 0; i < 10; i++ {
			client.SendMessage(msgs)
			time.Sleep(3 * time.Second)
		}

	case "SendMessage3":
		entries := []*snsscheduler.SNSEntry{
			&snsscheduler.SNSEntry{
				"你好，这是九枝兰推送的测试消息，打扰了。",
                0,
				"101",
				"eOqjwY7C3xdWUYOFb1ErjEKoFEDgpV2gzjOdWSoCnit8ifnrIar4srOpWtAfJUbg_sZP51qVg-KUSuiX8IcK0HAIC6fdEW6oNsFgI5AM7xI",
				nil,
				nil,
				&snsscheduler.WeixinExtraInfo{
					"text",
				},
			},
		}
		msgs := []*snsscheduler.SNSMessage{
			&snsscheduler.SNSMessage{
				111,
				10001,
				2,
				12,
				3,
				5,
				entries,
				false,
				"",
				0,
			},
		}

		fmt.Println(client.SendMessage(msgs))

	case "":
		Usage()

	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
